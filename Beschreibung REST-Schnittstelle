Syntax:
/pfad/{param1}/{param2}
Caller: Wer darf das aufrufen? (Authentifizierung)
PreCon: Was muss der Client als Vorbedingung sicherstellen?
PostCo: Was garantiert der Server als Nachbedingung?
Params: Was wird beim Aufruf übergeben (was nicht oben schon im Pfad steht; also entweder in URL als ?param3=...&param4=... oder als Schlüssel-Wert-Paar; das ist aber hier ein unrelevantes Implementierungsdetail)
Return: Was liefert der Server zurück? (Code, Daten - nur mögliche Erfolgsfälle abbilden)
Except: Was kann schiefgehen? (Code, Wann tritt der auf)
[Kurzbeschreibung]

Parameter weglassen falls trivial!

Patient = {IDs, Merkmale/Charakteristika}
Patientenliste identifiziert Browser nur über TempIDs. Löschen aller TempIDs bedeutet Abmeldung. Die PL hält eine "Sitzung" *für* den Browser, aber nicht *mit* dem Browser. Das ist die Shared Session aus der DSLib, die hier dazu dient Dinge zu cachen oder beim Abmelden die zu löschenden TempIDs zu kennen. 

token = 
{ id: null, type: addNewPatient, data: { callback: http://mdat/newPatient.php } } // wird beim Anlegen invalidiert; Callback gibt als Parameter tid mit.
{ type: tempId, data: { pid: H172MYA } }

/patients
GET
Caller: IDAT-Admin
Return: 2xx, Liste registrierter PIDs
Liefert Liste registrierter PIDs.

POST
Caller: MDAT-Server, Nutzer
Params: Merkmale des Patienten. PID, falls enthalten, wird ignoriert.
		URL-Parameter: 
			callback (optional): Callback-Adresse
			tokenId: Token
Return: 201, Erzeugte PID
Legt einen neuen Patienten an.

	/pid/{pid}
	GET
	Caller: IDAT-Admin
	Return: 2xx, Merkmale des Patienten, mit PID
	Abruf von Merkmalen des Patienten mit der PID pid.

	PUT
	Caller: IDAT-Admin
	PreCon: Patient mit PID pid existiert bereits
	PostCo: Patientenmerkmale komplett ausgetauscht durch die im Parameter.
	Params: Neue Merkmale. PID, falls enthalten, wird ignoriert.
	Return: TODO
	Aktualisiert Merkmale des bestehenden Patienten mit der PID pid. Komplettaustausch.

	/tempid
	DELETE
	(nicht unterstützt, verwende stattdessen DELETE /sessions/{session}.

		/{tid}
		GET
		Caller: Nutzer
		PreCon: tid wurde als Token registriert (@see POST /sessions/{session}/tokens)
		Return: 2xx, Merkmale des Patienten
		Abruf von Merkmalen des Patienten mit der TempID tempid.

		PUT
		Caller: Nutzer
		PreCon: tid wurde registriert (@see POST /sessions/{session}/tokens)
		PostCo: Patientenmerkmale komplett ausgetauscht durch die im Parameter.
		Params: Merkmale
		Return: TODO
		Aktualisiert Merkmale des Patienten mit der TempID tempid.

/sessions (nur MDAT und IDAT-Admin)
GET
Caller: MDAT
Liefert alle offenen Sitzungen mit dem aufrufenden Server.

POST
Caller: MDAT
Params: { changeListener: http://... } // Wird aufgerufen, wenn Sitzungsparameter sich ändern, Payload wie GET /sessions/{session}
Return: Sitzungskennung {session}
Legt eine neue Sitzung an.

	/{session}
	GET
	Caller: MDAT
	Liefert Sitzungsparameter (wie DSLib-Rsession).
	
	POST
	Caller: MDAT
	Params: Neue/veränderte Sitzungsparameter.
	Return: Neuer Satz an Sitzungsparametern.
	Aktualisiert Sitzungsparameter. Sitzung wird ergänzt/überschrieben.
	
	DELETE
	Caller: MDAT
	PostCo: Sitzung inkl. aller Tokens existiert nicht mehr.
	Beendet die Sitzung (aka Abmeldung des Nutzers)

		/tokens
		GET
		Caller: MDAT
		Gibt alle bestehenden Token zurück.
		
		POST
		Caller: MDAT
		Params: Payload eines Tokens, z.B.
				{ type: addNewPatient, data: { callback: http://mdat/newPatient.php } } // wird beim Anlegen invalidiert; Callback gibt als Parameter tid mit.
		        { type: tempId, data: { pid: H172MYA } }
		Return: Token-ID {tid}
		Legt ein neues Token an.

/html

	/createPatient
	GET
	Caller: Nutzer
	Params:
		tokenId: Id eines gültigen Tokens vom Typ "addPatient"
		callback (optional): Adresse, die nach dem Anlegen des Patienten aufgerufen werden soll
			(siehe POST /patients)  
	Gibt HTML-Formular zur Eingabe eines Patienten aus.

/functions // nachrüstbare Operationen, die auf den Daten der PL durchgeführt werden, ohne sie herauszugeben.
	/sendmail
	POST
	Params: Liste von PIDs, Header (erlaubt: From, To, CC, BCC, Subject), Body
	PreCon: Übergebene PIDs haben ein Feld "email".
	Return: 202 Accepted
	Sendet eine E-Mail an die übergebenen PIDs.