package de.unimainz.imbei.mzid.matcher;

import java.util.Vector;

import de.unimainz.imbei.mzid.CompoundField;
import de.unimainz.imbei.mzid.Field;

/**
 * A FieldTransformer is the abstraction of a transformation of one {@link Field} into another,
 * for example converting a string to uppercase or generating phonetic code. The type 
 * parameters specify which field types are suitable for input and which field type is output.
 *  
 * @author borg
 *
 * @param <IN> Class of fields suitable as input field.
 * @param <OUT> Class of output fields generated by a specific FieldTransformer.
 */
public abstract class FieldTransformer<IN extends Field<?>, OUT extends Field<?>>{

	/**
	 * Transform a field.
	 * @param input The input field.
	 * @return The transformed field.
	 */
	public abstract OUT transform(IN input);
	
	/**
	 * Return the class suitable for input fields. Implementations should return
	 * the a class object corresponding to type parameter IN. This method is needed to
	 * check at runtime if a specific FieldTransformer object is compatible to a specific Field
	 * object (type parameters cannot be queried at runtime).  
	 */	
	public abstract Class<IN> getInputClass();
	/** Return the class of output fields. See {@link #getInputClass()} for details.
	 * 
	 */
	public abstract Class<OUT> getOutputClass();
	
	/** Default handling for compound fields: Element-wise transformation
	 * of the components.
	 * @param input A CompoundField.
	 * @return A CompoundField where component i is the result of 
	 * this.transform(input.getValueAt(i)).
	 */
	public CompoundField<OUT> transform(CompoundField<IN> input)
	{
		Vector<OUT> outFields = new Vector<OUT>(input.getSize());
		for (IN thisField : input.getValue())
		{
			outFields.add(this.transform(thisField));
		}
		CompoundField<OUT> result = new CompoundField<OUT>(outFields);
		return result;
	}
}
